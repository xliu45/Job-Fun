class Solution {
public:
ListNode* reverseList(ListNode* head){
    if (head==NULL || head->next==NULL) return head;
    ListNode *pre=head, *cur=pre->next, *post;
    pre->next = NULL;
    while (cur!=NULL){
        post = cur->next;
        cur->next = pre;
        pre = cur;
        cur = post;
    }
    return pre;
}
void mergeList(ListNode* L1, ListNode *L2){
    ListNode *cur1=L1, *cur2=L2,*post1,*post2;
    while(cur2!=NULL){
        post1 = cur1->next;
        post2 = cur2->next;
        cur1->next = cur2;
        cur2->next = post1;
        cur1 = post1;
        cur2 = post2;
    }
}
void reorderList(ListNode* head) {
    if (head==NULL || head->next==NULL || head->next->next==NULL) return;
    ListNode *slow=head,*fast=head;
    while(fast->next!=NULL && fast->next->next!=NULL){
        fast = fast->next->next;
        slow = slow->next;
    }
    ListNode *head2 = slow->next;
    slow->next = NULL;
    mergeList(head,reverseList(head2));
  }
};
