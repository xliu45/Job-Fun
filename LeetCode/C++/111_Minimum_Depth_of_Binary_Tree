//111. Minimum Depth of Binary Tree
/*
Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Tag: Tree, Depth-first search, Breadth-first search

Author: Xinyu Liu
*/

#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
    int minDepth(TreeNode *root) {
        if(!root) return 0;
        if(!root->left) return 1 + minDepth(root->right);
        if(!root->right) return 1 + minDepth(root->left);
        return 1+min(minDepth(root->left),minDepth(root->right));
    }
};

void main()
{
    TreeNode n1(1),n2(2),n3(3),n4(4),n5(5);
    n1.left = &n2;
    n1.right = &n3;
    n2.left = &n4;
    n3.right = &n5;
    Solution sol;
    int n = sol.minDepth(&n1);
}
