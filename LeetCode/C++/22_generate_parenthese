// please refer to https://leetcode.com/discuss/86372/c-0ms-recursive-solution-with-explanation for detail

class Solution {
public:
    void generate(vector<string> *result, string str, int open, int n ) //recursive function to add parentheses
    {  
        // INPUT: open: count of unmatched left parentheses
        //        n   : carried over from the initial input n
        if (str.size() == 2*n)               // if max length is reached, return result
        {
            (*result).push_back(str);
        }
        else {
            if (str.size() + open < 2*n)  { // if there are extra unused left parentheses
                // str.push_back('(');
                // generate(result, str, open+1, n );
                string s2(str);
                s2.push_back('(');
                generate(result, s2, open+1, n);
            }
            if ( open > 0) {  // if there are still unmatched left parentheses
                str.push_back(')');
                generate(result, str, open-1, n );
            }
        }
    }
        
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        
        if (n == 0)
            return result;
        
        generate(&result, "(", 1, n );
        
        return result;
    }
};
